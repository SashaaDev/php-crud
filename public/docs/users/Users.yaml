openapi: 3.0.0
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9
servers:
  - url: http://localhost/api
    description: localhost
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
paths:
  /users:
    get:
      summary: Returns the data of all users.
      parameters:
        - $ref: "#/components/parameters/idParam"
      description: Retrieve a list of all users registred in system.

      responses:
        "200":
          description: Successful get list of users.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/PaginateUsers"
                
    put:
      summary : Creating a user.
      description: This endpoint creates a new user in the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: User was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: userName2
                  email:
                    type: string
                    example: userName@gmail.com
                  updated_at:
                    type: string
                    example: 2024-03-12T12:11:49.000000Z
                  created_at:
                    type: string
                    example: 2024-03-12T12:11:49.000000Z
                  id:
                    type: integer
                    format: int32
                    example: 1
        "422":
          description: Incorrect entering data.
          content:
            application/json:
              schema:
                type: object
              examples:
                NameMinLength:
                  $ref: "#/components/examples/NameMinLength"
                NameMaxLength:
                  $ref: "#/components/examples/NameMaxLength"
                NameNumAndLetter:
                  $ref: "#/components/examples/NameNumAndLetter"
                NameIsRequired:
                  $ref: "#/components/examples/NameIsRequired"
                EmailAlreadyUse:
                  $ref: "#/components/examples/EmailAlreadyUse"
                EmailIsNotValid:
                  $ref: "#/components/examples/EmailIsNotValid"
                EmailIsRequired:
                  $ref: "#/components/examples/NameIsRequired"
                PasswordMinLength:
                  $ref: "#/components/examples/PasswordMinLength"
                PasswordIsString:
                  $ref: "#/components/examples/PasswordIsString"
                PasswordIsRequired:
                  $ref: "#/components/examples/PasswordIsRequired"

    delete:
      summary: Deleting users.
      description: This endpoint all users from the system.
      responses:
        "200":
          description: "Users successfully deleted."

  /users/{id}:
    get:
      parameters:
        - $ref: "#/components/parameters/idParam"

      summary: Returns user data by ID.
      description: This endpoint return all data of user by ID.
      responses:
        "200":
          description: Data of user successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRequest"
        "404":
          description: "User not found."
    put:
      parameters:
        - $ref: "#/components/parameters/idParam"
      summary: Update user`s data
      description: List of updated user data
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"

      responses:
        "200":
          description: Returns user`s update
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreates"
        "403":
          description: "Forbidden."
        "404":
          description: "User not found."
        "422":
          description: Incorrect entering data.
          content:
            application/json:
              schema:
                type: object
              examples:
                NameMinLength:
                  $ref: "#/components/examples/NameMinLength"
                NameMaxLength:
                  $ref: "#/components/examples/NameMaxLength"
                NameNumAndLetter:
                  $ref: "#/components/examples/NameNumAndLetter"
                EmailAlreadyUse:
                  $ref: "#/components/examples/EmailAlreadyUse"
                EmailIsNotValid:
                  $ref: "#/components/examples/EmailIsNotValid"
                PasswordMinLength:
                  $ref: "#/components/examples/PasswordMinLength"
                PasswordIsString:
                  $ref: "#/components/examples/PasswordIsString"
    delete:
      parameters:
        - $ref: "#/components/parameters/idParam"
      summary: Delete user by ID.
      description: This endpoint delete user from the system using ID.
      responses:
        "200":
          description: "User successfully deleted."
        "404":
          description: "User not founded."
#data
components:
  schemas:
    UserRequest:
      type: object
      properties:
        name:
          type: string
          example: User2
        email:
          type: string
          example: UserFirst5@gmail.com
        password:
          type: string
          example: 123456789
    UserCreates:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: userName1
        email:
          type: string
          example: userName@gmail.com
        email_verified_at:
          type: string
          format: nullable
        hash:
          type: string
          format: nullable
        created_at:
          type: string
          example: 2024-03-12T07:23:08.000000Z
        updated_at:
          type: string
          example: 2024-03-12T09:03:06.000000Z
    PaginateUsers:
      type: object
      properties:
        current page:
          type: integer
          format: int32
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int32
              name:
                type: string
              email:
                type: string
              email_verified_at:
                type: string
                format: nullable
              hash:
                type: string
                format: nullable
              created_at:
                type: string
              updated_at:
                type: string
        first_page_url:
          type: string
        from:
          type: integer
          format: int32
        last_page:
          type: integer
          format: int32
        last_page_url:
          type: string
        links:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: nullable
              label:
                type: string
              active:
                type: boolean
        next_page_url:
          type: string
          format: nullable
        path:
          type: string
        per_page:
          type: integer
          format: int32
        prev_page_url:
          type: string
          format: nullable
        to:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
  parameters:
    idParam:
      in: path
      name: id
      schema:
        type: integer
        example: 1
      required: true

  examples:
    NameMinLength:
      value:
        message: "The name field must be at least 2 characters."
        error:
          text: "The name field must be at least 2 characters."
    NameNumAndLetter:
      value:
        message: "The name field must only contain letters and numbers."
        error:
          text: "The name field must only contain letters and numbers."
    NameMaxLength:
      value:
        message: "The name field must not exceed 20 characters."
        error:
          text: "The name field must not exceed 20 characters."
    NameIsRequired:
      value:
        message: "The password field is required."
        error:
          text: "The password field is required."
    EmailAlreadyUse:
      value:
        message: "The email address is already in use."
        error:
          text: "The email address is already in use."
    EmailIsNotValid:
      value:
        message: "Please enter a valid email address."
        error:
          text: "Please enter a valid email address."
    EmailIsRequired:
      value:
        message: "The email field is required."
        error:
          text: "The email field is required."
    PasswordMinLength:
      value:
        message: "The password must be at least 8 characters long."
        error:
          text: "The password must be at least 8 characters long."
    PasswordIsString:
      value:
        message: "The password field must be a string."
        error:
          text: "The password field must be a string."
    PasswordIsRequired:
      value:
        message: "The password field is required."
        error:
          text: "The password field is required."
